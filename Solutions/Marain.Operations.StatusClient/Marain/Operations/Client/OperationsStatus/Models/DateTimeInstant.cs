// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Operations.Client.OperationsStatus.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a particular moment in time
    /// </summary>
    public partial class DateTimeInstant
    {
        /// <summary>
        /// Initializes a new instance of the DateTimeInstant class.
        /// </summary>
        public DateTimeInstant()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DateTimeInstant class.
        /// </summary>
        /// <param name="dateTimeOffset">The instant represented as a date and
        /// time with optional offset</param>
        /// <param name="unixTime">The instance represented as the number of
        /// seconds that have elapsed since midnight (UTC) 1st January
        /// 1970</param>
        public DateTimeInstant(System.DateTime dateTimeOffset, long unixTime)
        {
            DateTimeOffset = dateTimeOffset;
            UnixTime = unixTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the instant represented as a date and time with
        /// optional offset
        /// </summary>
        [JsonProperty(PropertyName = "dateTimeOffset")]
        public System.DateTime DateTimeOffset { get; set; }

        /// <summary>
        /// Gets or sets the instance represented as the number of seconds that
        /// have elapsed since midnight (UTC) 1st January 1970
        /// </summary>
        [JsonProperty(PropertyName = "unixTime")]
        public long UnixTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
