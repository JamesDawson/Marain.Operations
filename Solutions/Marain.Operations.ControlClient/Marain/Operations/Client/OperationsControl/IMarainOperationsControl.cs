// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Operations.Client.OperationsControl
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// This API is used by services that implement long-running operations to
    /// define and update operations reported through the Operations Status
    /// API. E.g., consider some service called SlowService which provides an
    /// operation DoSlowWork, in which clients invoke the operation with an
    /// HTTP POST to https://slowservice.marain.net/api/DoSlowWork and this
    /// endpoint conforms to the long-running operation spec at
    /// https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#1322-post
    /// as amended by https://github.com/Microsoft/api-guidelines/pull/101 -
    /// the DoSlowWork should provide an HTTP response with a status code of
    /// 202, and a Location header referring to a resource representing the
    /// operation, as provided by the Operations Status API, e.g.
    /// https://operationsstatus.marain.net/api/operationsstatus/{opId} where
    /// {opId} is the unique identifier of the operation. For that Location URL
    /// to work, the DoSlowWork service must first create the operation using
    /// this Operations Control API's CreateOperation operation. This provides
    /// the URL for the operation in its Location header, which the DoSlowWork
    /// service can then return in its own Location header. The client of the
    /// DoSlowWork service can then use this to track the progress of the
    /// operation. Meanwhile, the SlowService can update what that client will
    /// see using the other operations provided by this Operations Control API.
    /// When work commences, it will use SetOperationRunning to move it from
    /// the "Not Started" state into the "Running" state, and it may optionally
    /// call this repeatedly, providing the percentComplete parameter to
    /// indicate what proportion of the work is complete. When the operation
    /// finishes, the SlowService will use either the SetOperationFailed or
    /// SetOperationSucceeded operation of this Operations Control API to
    /// indicate the final outcome. Note that the endpoints don't protect
    /// against concurrent requests to update a single operation; should this
    /// happen, the last message processed will always take precedence.'
    ///
    /// </summary>
    public partial interface IMarainOperationsControl : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Create a new operation, which will be in the "Not Started" state
        /// </summary>
        /// <param name='tenantId'>
        /// Id of the Tenant.
        /// </param>
        /// <param name='operationId'>
        /// Id of the Operation.
        /// </param>
        /// <param name='resourceLocation'>
        /// Optional URI based location of the result of the Operation.
        /// </param>
        /// <param name='expireAfter'>
        /// Optional number of seconds for which to retain data about this
        /// operation after its last state change
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationHeaderResponse<CreateOperationHeaders>> CreateOperationWithHttpMessagesAsync(string tenantId, System.Guid operationId, string resourceLocation = default(string), long? expireAfter = default(long?), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set an existing operation into the "Failed" state
        /// </summary>
        /// <param name='tenantId'>
        /// Id of the Tenant.
        /// </param>
        /// <param name='operationId'>
        /// Id of the Operation.
        /// </param>
        /// <param name='expireAfter'>
        /// Optional number of seconds for which to retain data about this
        /// operation after its last state change
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails,SetOperationFailedHeaders>> SetOperationFailedWithHttpMessagesAsync(string tenantId, System.Guid operationId, long? expireAfter = default(long?), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set an operation into the "Running" state
        /// </summary>
        /// <param name='tenantId'>
        /// Id of the Tenant.
        /// </param>
        /// <param name='operationId'>
        /// Id of the Operation.
        /// </param>
        /// <param name='percentComplete'>
        /// Optional percentage completeness of the Operation.
        /// </param>
        /// <param name='contentId'>
        /// Optional Content Id of Localized Content status message.
        /// </param>
        /// <param name='expireAfter'>
        /// Optional number of seconds for which to retain data about this
        /// operation after its last state change
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails,SetOperationRunningHeaders>> SetOperationRunningWithHttpMessagesAsync(string tenantId, System.Guid operationId, int? percentComplete = default(int?), string contentId = default(string), long? expireAfter = default(long?), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Set an operation into the "Succeeded" state
        /// </summary>
        /// <param name='tenantId'>
        /// Id of the Tenant.
        /// </param>
        /// <param name='operationId'>
        /// Id of Operation.
        /// </param>
        /// <param name='resourceLocation'>
        /// Optional URI based location of the result of the Operation.
        /// </param>
        /// <param name='expireAfter'>
        /// Optional number of seconds for which to retain data about this
        /// operation after its last state change
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails,SetOperationSucceededHeaders>> SetOperationSucceededWithHttpMessagesAsync(string tenantId, System.Guid operationId, string resourceLocation = default(string), long? expireAfter = default(long?), string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// View swagger definition for this API
        /// </summary>
        /// <remarks>
        /// View swagger definition for this API
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSwaggerWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
