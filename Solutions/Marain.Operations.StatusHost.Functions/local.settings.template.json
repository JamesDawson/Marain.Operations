{
  "IsEncrypted": false,
  "Values": {
    "AzureWebJobsStorage": "UseDevelopmentStorage=true",
    "FUNCTIONS_WORKER_RUNTIME": "dotnet",
    "AzureServicesAuthConnectionString": "RunAs=Developer; DeveloperTool=AzureCLI",
    "APPINSIGHTS_INSTRUMENTATIONKEY": "",

    // If you want to debug against a real storage account in Azure, set AccountName to the full connection string.
    // If you want to debug the code the fetches the storage strings from key vault, set AccountName to just the
    // storage account name and then set the key vault and secret names, and you'll also need to set
    // TenantCloudBlobContainerFactoryOptions__AzureServicesAuthConnectionString
    // to a suitable string for authenticating against key vault. If your personal account has access to the key vault, you can use:
    // "RunAs=Developer; DeveloperTool=AzureCLI",
    // otherwise, set up a suitable service principle, and use:
    // "TenantCloudBlobContainerFactoryOptions__AzureServicesAuthConnectionString": "RunAs=App;AppId=AppIdForYourServicePrinciple;TenantId=0f621c67-98a0-4ed5-b5bd-31a35be41e29;AppKey=YourAppSecretHere",
    "TenantCloudBlobContainerFactoryOptions__RootTenantBlobStorageConfiguration__AccountName": "UseDevelopmentStorage=true",
    "TenantCloudBlobContainerFactoryOptions__RootTenantBlobStorageConfiguration__KeyVaultName": "",
    "TenantCloudBlobContainerFactoryOptions__RootTenantBlobStorageConfiguration__AccountKeySecretName": "",

    // If running with a local tenancy service, point TenancyClient__TenancyServiceBaseUri at the localhost address for that
    "TenancyClient__TenancyServiceBaseUri": "https://marYOURENVIRONMENTtenancy.azurewebsites.net/"

    // If instead you point TenancyClient__TenancyServiceBaseUri at an instance in Azure, this local service will need to
    // authenticate, which means you'll need to set this this:
    // "TenancyClient__ResourceIdForMsiAuthentication": "AppIdSecuringAccessToTenancyFunction"
    //
    // And for that to work, you won't be able to use tne normal az cli-based AzureServicesAuthConnectionString
    // (because az cli is only able to obtain tokens for a fixed set of known Microsoft resource; it can't be
    // used to obtain tokens for arbitrary applications that we've defined). Instead, you'll need to create
    // a suitable service principle in AAD, grant that service principle access to the tenancy service, and
    // set up the credentials like this instead of the setting above:
    //  "AzureServicesAuthConnectionString": "RunAs=App;AppId=AppIdForYourServicePrinciple;TenantId=0f621c67-98a0-4ed5-b5bd-31a35be41e29;AppKey=YourAppSecretHere"
  }
}